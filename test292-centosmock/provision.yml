- name: Build RPMs

  hosts: all
  become: yes

  vars:
    mock_chroots:
      - centos-6-x86_64
      - centos-7-x86_64

  tasks:
    - name: required packages are installed
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - mock
        - rpmdevtools

    - name: mock user is present
      user:
        name: mock
        groups: mock
        password: "*"
        state: present

    - name: mock working directories are present
      file:
        name: "/home/mock/{{ item }}"
        state: directory
      with_items:
        - spec
        - source
        - rpm
      become_user: mock

    - name: mock chroots are present and up to date
      command: /usr/bin/mock --root "{{ item }}" --update
      with_items: "{{ mock_chroots }}"

    - name: mock chroot rpm tags are gathered
      command: >
        /usr/bin/mock --root "{{ item }}"
                      --offline
                      --quiet
                      --chroot
                      --
                      rpm --eval "{ releasever: '%{centos_ver}', dist: '%{?dist}', arch: '%{_arch}' }"
      changed_when: none
      with_items: "{{ mock_chroots }}"
      register: mock_tags_cmd

    - name: mock chroot rpm tags are set as fact
      set_fact:
        mock_tags: "{{ dict(mock_chroots
                            | zip(range(mock_tags_cmd.results | length)
                                  | map('extract', mock_tags_cmd.results, 'stdout')
                                  | map('from_yaml'))) }}"

    - name: spec is pushed to the host
      copy:
        src: hello.spec
        dest: /home/mock/spec/
      become_user: mock

    - name: rpm versioned name is computed
      command: >
        /usr/bin/rpmspec --query
                         --define "debug_package %{nil}"
                         --define "dist %{nil}"
                         --queryformat "%{name}-%{version}-%{release}"
                         /home/mock/spec/hello.spec
      changed_when: none
      register: name_cmd

    - name: rpm build metadata is set as fact
      set_fact:
        mock_builds: |-
          {% set name = name_cmd.stdout %}
          {% set mock_builds = [] %}
          {% for chroot in mock_chroots %}
          {%   set tags = mock_tags[chroot] %}
          {%   set _ = mock_builds.append({
                 'chroot': chroot,
                 'releasever': tags.releasever,
                 'arch': tags.arch,
                 'srpm': name + tags.dist + '.src.rpm',
                 'rpm': name + tags.dist + '.' + tags.arch + '.rpm'
               })
          %}
          {% endfor %}
          {{ mock_builds }}

    - name: rpm source is fetched
      command: >
        /usr/bin/spectool --get-files
                          --directory /home/mock/source
                          /home/mock/spec/hello.spec
      register: spectool_cmd
      changed_when: "'skipping download' not in spectool_cmd.stderr"
      become_user: mock

    - name: source rpms are built
      command: >
        /usr/bin/mock --root "{{ item.chroot }}"
                      --buildsrpm
                      --spec /home/mock/spec/hello.spec
                      --sources /home/mock/source
                      --resultdir /home/mock/rpm
      args:
        creates: "/home/mock/rpm/{{ item.srpm }}"
      with_items: "{{ mock_builds }}"
      become_user: mock

    - name: rpms are built
      command: >
        /usr/bin/mock --root "{{ item.chroot }}"
                      --rebuild
                      --resultdir /home/mock/rpm
                      "/home/mock/rpm/{{ item.srpm }}"
      args:
        creates: "/home/mock/rpm/{{ item.rpm }}"
      with_items: "{{ mock_builds }}"
      become_user: mock


- name: Serve RPM repository via HTTP

  hosts: all
  become: yes

  vars:
    repo_port: 2000

  tasks:
    - name: epel is enabled
      yum:
        name: epel-release
        state: present

    - name: nginx is installed
      yum:
        name: nginx
        state: present

    - name: createrepo is installed
      yum:
        name: createrepo
        state: present

    - name: ansible selinux dependency is installed
      yum:
        name: policycoreutils-python
        state: present

    - name: nginx core config is pushed
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify:
        - restart nginx

    - name: nginx rpm-repo config is pushed
      template:
        src: nginx-rpm-repo.conf.j2
        dest: /etc/nginx/conf.d/rpm-repo.conf
      notify:
        - restart nginx

    - name: rpm web repositories are created
      file:
        path: "/var/www/rpm-repo/{{ item.releasever }}/{{ item.arch }}"
        state: directory
        owner: nginx
        group: nginx
      with_items: "{{ mock_builds }}"

    - name: rpm files are copied to web repository
      copy:
        remote_src: yes
        src: "/home/mock/rpm/{{ item.rpm }}"
        dest: "/var/www/rpm-repo/{{ item.releasever }}/{{ item.arch }}/"
      with_items: "{{ mock_builds }}"

    - name: rpm-repo metadata is created
      command: >
        /usr/bin/createrepo "/var/www/rpm-repo/{{ item.releasever }}/{{ item.arch }}"
      with_items: "{{ mock_builds }}"

    - name: selinux allows nginx to bind to the repo port
      seport:
        setype: http_port_t
        ports: "{{ repo_port }}"
        proto: tcp
        state: present

    - name: selinux allows nginx to read repo tree
      file:
        name: /var/www/rpm-repo/
        state: directory
        setype: httpd_sys_content_t
        recurse: yes

    - name: nginx is activated
      service:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted


- name: Test repository access

  hosts: all
  become: yes

  vars:
    repo_baseurl: http://localhost:2000/$releasever/$arch/

  tasks:
    - name: local repository is registered
      yum_repository:
        name: local
        description: Local repository
        baseurl: "{{ repo_baseurl }}"
        gpgcheck: no

    - name: local repository package is installed
      yum:
        name: hello
        state: present
